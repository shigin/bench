#!/bin/sh

usage() {
cat << END
usage: $0 [--repo url|--conf file|--dir dir] [--rev revision]... program
    --repo url      --- use repository
    --dir dir       --- use directory to check
    --conf file     --- config file
    --make program  --- use program to build instead of make
    --rev revision  --- bench revision
    --minmax        --- show min and max times
    --keep          --- do use previous .bench-data file
    program         --- program to bench
END
}

die() {
    echo $0: "$@" 1>&2
    exit 1
}

BENCH=./bench
MAKE=make

case $0 in
    *bench-svn)
        checkout() {
            local repository="$1"
            local target="$2"
            svn checkout $repository $target
        }

        set_revision() {
            local wc="$1"
            local rev="$2"
            svn update -r "$rev" "$wc"
        }
        ;;
    *bench-git)
        checkout() {
            local repository="$1"
            local target="$2"
            git clone $repository $target
        }

        set_revision() {
            local wc="$1"
            local rev="$2"
            (cd $wc && git reset --hard $rev)
        }
        ;;
    *)
        die "bench-git can't work as $0"
esac

write_bench_data() {
    local revs="$1"
    local wc="$2"
    local program="$3"
    local data_file="$4"
    local tmp="`mktemp tempdata.XXX`"

    for rev in $revs ; do
        eval "local has_key=\"\$rev${rev}_bench_sys_mean\""
        if [ -n "$has_key" ] ; then
            continue
        fi
        set_revision "$wc" "$rev" || { rm $tmp; die "can't checkout $rev"; }
        (cd "$wc" && $MAKE) || { rm $tmp; die "can't make"; }
        if $BENCH -b -C $wc $PROGRAM > "$tmp" ; then
            grep '=' $tmp | sed "s/^/rev${rev}_/" >> "$data_file"
            sleep 1
        else
            rm $tmp
            die "can't run benchmark"
        fi
    done
    rm $tmp
}

get_revs() {
    if [ -n "$*" ] ; then
        echo "$@"
    else
        die "please specify revision"
    fi
}

get_table() {
    local revs="`get_revs "$@"`"
    cat << END
Time table
.pl 1000i
.TS
tab(@);
l | c s | c s | c s
l | c c | c c | c c
r | n n | n n | n n.
_
revision @ real @ user @ sys
    @ mean @ sd @ mean @ sd @ mean @ sd
END
    if [ "$MINMAX" = 1 ] ; then
        echo " @ min @ max @ min @ max @ min @ max"
    fi
    echo _
    for rev in $revs ; do
        eval  "sys=\"\$rev${rev}_bench_sys_mean\""
        eval "user=\"\$rev${rev}_bench_user_mean\""
        eval "real=\"\$rev${rev}_bench_real_mean\""

        eval  "sys_sd=\"\$rev${rev}_bench_sys_sd\""
        eval "user_sd=\"\$rev${rev}_bench_user_sd\""
        eval "real_sd=\"\$rev${rev}_bench_real_sd\""

        eval  "sys_min=\"\$rev${rev}_bench_sys_min\""
        eval "user_min=\"\$rev${rev}_bench_user_min\""
        eval "real_min=\"\$rev${rev}_bench_real_min\""

        eval  "sys_max=\"\$rev${rev}_bench_sys_max\""
        eval "user_max=\"\$rev${rev}_bench_user_max\""
        eval "real_max=\"\$rev${rev}_bench_real_max\""

        echo "$rev @ $real @ $real_sd @ $user @ $user_sd @ $sys @ $sys_sd"
        if [ "$MINMAX" = 1 ] ;then
            echo "@ $real_min @ $real_max @ $user_min @ $user_max @ $sys_min @ $sys_max"
            echo _
        fi
    done

    if [ "$MINMAX" = 0 ] ; then
        echo _
    fi
    cat << END
.TE
.pl 0i
END
}

MINMAX=0
CLEAN_BASE=1
while [ ! -z "$1" ] ; do
    case $1 in
    --keep)
        CLEAN_BASE=0
        ;;
    --minmax)
        MINMAX=1
        ;;
    --dir)
        [ -z "$2" ] && die "directory option require directory"
        DIRECTORY="$2"
        shift
        ;;
    --repo)
        [ -z "$2" ] && die "repo option require repository URL"
        REPO="$2"
        shift
        ;;
    --conf)
        [ -z "$2" ] && die "conf option require configuration file"
        if echo "$2" | fgrep -q / ; then
            CONF="$2"
        else
            # by standard, '.' (dot) search file in PATH if file name doesn't
            # contain slash
            # http://www.opengroup.org/onlinepubs/009695399/utilities/dot.html
            CONF="./$2"
        fi
        . "$CONF" || die "can't load config file $2"
        shift
        ;;
    --rev)
        [ -z "$2" ] && die "rev option require revision number"
        REVS="$REVS $2"
        shift
        ;;
    --make)
        [ -z "$2" ] && die "make option require make program"
        MAKE="$2"
        shift
        ;;
    -h|--help)
        usage
        exit 0
        ;;
    -*)
        die "unknown option '$1'"
        ;;
    *)
        break
        ;;
    esac
    shift
done

if [ -z "$DIRECTORY" -a -z "$REPO" -a -z "$CONFIG" ] ; then
    if [ -r ./.bench-config ] ; then
        . ./.bench-config
    else
        die "you have to specify dir, config or repo"
    fi
fi

if [ -z "$REVS" ] ; then
    REVS="HEAD"
fi

if [ -z "$PROGRAM" ] ; then
    [ -z "$*" ] && die "need program to run"
    PROGRAM="$*"
fi

if [ -n "$REPO" ] ; then
    WC=`mktemp -d _repoXXXX`
    [ -z "$WC" ] && die "can't create temporary directory"
    DIRECTORY=$WC/repo
    checkout "$REPO" "$DIRECTORY" || die "can't clone repository"
fi

if [ "$CLEAN_BASE" = 1 ] ; then
    echo > .bench-data
fi

[ -r ./.bench-data ] && . ./.bench-data
if [ -n "$DIRECTORY" ] ; then
    write_bench_data "$REVS" "$DIRECTORY" "$PROGRAM" .bench-data
else
    die "need directory to work"
fi

if [ -n "$WC" ] ; then
    rm -rf "$WC"
fi

. ./.bench-data


get_table $REVS | nroff -t
